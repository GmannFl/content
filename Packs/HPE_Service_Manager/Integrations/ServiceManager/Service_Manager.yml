commonfields:
  id: Service Manager
  version: -1
name: Service Manager
display: Service Manager
category: Case Management
description: Service Manager By Micro Focus (Formerly HPE Software).
configuration:
- display: Server URL (e.g. https://192.168.0.1:13080)
  name: url
  type: 0
  required: true
- display: Username
  name: username
  type: 9
  required: true
- display: Trust any certificate (not secure)
  name: insecure
  type: 8
  required: false
- display: Use system proxy settings
  name: proxy
  type: 8
  required: false
script:
  script: |
    var url = params.url + '/SM/9/rest';

    // handle '/' at the end of the url
    if (url[url.length - 1] === '/') {
        url = url.substring(0, url.length - 1);
    }

    var token = Base64.encode(params.username.identifier + ':' + params.username.password);

    var result;
    // The command input arg holds the command sent from the user.
    switch (command) {
        case 'test-module':
            listDevices();
            result = 'ok';
            break;
        case 'hpsm-create-incident':
            result = createIncident();
            break;
        case 'hpsm-create-request':
            result = createRequest();
            break;
        case 'hpsm-update-incident':
            result = updateIncident();
            break;
        case 'hpsm-list-incidents':
            result = listIncidents();
            break;
        case 'hpsm-get-incident-by-id':
            result = getIncidentById();
            break;
        case 'hpsm-create-resource':
            result = createResource();
            break;
        case 'hpsm-update-resource':
            result = updateResource();
            break;
        case 'hpsm-list-resource':
            result = listResources();
            break;
        case 'hpsm-get-resource-by-id':
            result = getResourceById();
            break;
        case 'hpsm-list-devices':
            result = listDevices();
            break;
        case 'hpsm-get-device':
            result = getDeviceById();
            break;
        default:
    }
    return result;
    function updateIncident() {
        var newIncident = {
            Incident: {
                Category: args.category,
                Description: [
                    args.description
                ],
                Service: args.service,
                Title: args.title,
            }
        };
        if (args.customFields !== undefined){
            fields = JSON.parse(args.customFields);
            for (var field in fields) {
                newIncident['Incident'][field] = fields[field]
            }
        }
        if (args.impact) {
            newIncident.Incident.Impact = args.impact;
        }
        if (args.urgency) {
            newIncident.Incident.Urgency = args.urgency;
        }
        if (args.alertStatus) {
            newIncident.Incident.AlertStatus = args.alertStatus;
        }
        if (args.area) {
            newIncident.Incident.Area = args.area;
        }
        if (args.assignmentGroup) {
            newIncident.Incident.AssignmentGroup = args.assignmentGroup;
        }
        if (args.affectedCI) {
            newIncident.Incident.AffectedCI = args.affectedCI;
        }
        if (args.company) {
            newIncident.Incident.Company = args.company;
        }
        if (args.category) {
            newIncident.Incident.Category = args.category;
        }
        if (args.phase) {
            newIncident.Incident.Phase = args.phase;
        }
        if (args.status) {
            newIncident.Incident.Status = args.status;
        }
        if (args.subarea) {
            newIncident.Incident.Subarea = args.subarea;
        }
        var res = doPost('/incidents/'+args.incidentId, newIncident);
        var parsedRes = JSON.parse(res);
        if (parsedRes.ReturnCode !== 0) {
            throw 'Failed to update incident. Error Response: ' + res.Messages;
        }
        hrIncident = parsedRes.Incident;
        var entryContext = {
            'HPSM.Incidents': [parsedRes.Incident],
            Ticket: [
                {
                    ID: parsedRes.Incident.IncidentID,
                    Creator: parsedRes.Incident.OpenedBy,
                    Assignee: parsedRes.Incident.Assignee,
                    State: parsedRes.Incident.Status
                }
            ]
        };
        return {
            Type: entryTypes.note,
            ContentsFormat: formats.json,
            Contents: parsedRes,
            ReadableContentsFormat: formats.markdown,
            HumanReadable: tableToMarkdown('Updated Incident ' + parsedRes.Incident.IncidentID, hrIncident),
            EntryContext: entryContext
        };
    } // queryToObject takes query of format field1=value1&field2=value2 and return query object like: { "field1": "value1", "field2": "value2" }

    function createRequest() {
        var newRequest = {
            [params.resourcename]: {
                Category: args.category,
                Purpose: [
                    args.purpose
                ],
                Service: args.service,
                Title: args.title,
            }
        };

        if (args.callbackcontactname) {
            newRequest[params.resourcename]['CallbackContactName'] = args.callbackcontactname;
        }
        if (args.contactname) {
            newRequest[params.resourcename]['ContactName'] = args.contactname;
        }
        if (args.title) {
            newRequest[params.resourcename]['Title'] = args.title;
        }
        if (args.purpose) {
             newRequest[params.resourcename]['Purpose'] = args.purpose;
        }

        if (args.callbackcontactname == args.contactname) {
            requested_for = args.contactname;
        } else {
            requested_for = args.callbackcontactname;
        }
        newRequest[params.resourcename]['cartItems'] = [{ 'ItemName': args.title , 'Quantity': '1', 'RequestedFor': requested_for }];

        //throw JSON.stringify(newRequest)
        var res = doPost('/'+params.resourcename, newRequest);
        var parsedRes = JSON.parse(res);
        if (parsedRes.ReturnCode !== 0) {
            throw 'Failed to create request. Error Response: ' + res.Messages;
        }

        req = parsedRes['Messages'][2];
        request = req.split('"');

        var srHPSM = {};
        var lstHPSM = [];

        srHPSM['ID'] = request[1];
        srHPSM['CallbackType'] = parsedRes[params.resourcename]['CallbackType'];
        srHPSM['CallbackContactName'] = parsedRes[params.resourcename]['CallbackContactName'];
        srHPSM['Title'] = parsedRes[params.resourcename]['Title'];
        srHPSM['Purpose'] = parsedRes[params.resourcename]['Purpose'][0];
        srHPSM['ContactName'] = parsedRes[params.resourcename]['ContactName'];

        lstHPSM.push(srHPSM);

        var entryContext = {
            'HPSM.ServiceRequest': lstHPSM,
        };

        return {
            Type: entryTypes.note,
            ContentsFormat: formats.json,
            Contents: parsedRes,

            ReadableContentsFormat: formats.markdown,
            HumanReadable: tableToMarkdown('Created Service Request ', lstHPSM),

            EntryContext: entryContext
        };
    }

    function createIncident() {
        var newIncident = {
            Incident: {
                Category: args.category,
                Description: [
                    args.description
                ],
                Service: args.service,
                Title: args.title,
            }
        };

        if (args.customFields !== undefined){
            fields = JSON.parse(args.customFields);
            for (var field in fields) {
                newIncident['Incident'][field] = fields[field]
            }
        }

        if (args.impact) {
            newIncident.Incident.Impact = args.impact;
        }
        if (args.urgency) {
            newIncident.Incident.Urgency = args.urgency;
        }
        if (args.alertStatus) {
            newIncident.Incident.AlertStatus = args.alertStatus;
        }
        if (args.area) {
            newIncident.Incident.Area = args.area;
        }
        if (args.assignmentGroup) {
            newIncident.Incident.AssignmentGroup = args.assignmentGroup;
        }
        if (args.affectedCI) {
            newIncident.Incident.AffectedCI = args.affectedCI;
        }
        if (args.company) {
            newIncident.Incident.Company = args.company;
        }
        if (args.category) {
            newIncident.Incident.Category = args.category;
        }

        if (args.phase) {
            newIncident.Incident.Phase = args.phase;
        }
        if (args.status) {
            newIncident.Incident.Status = args.status;
        }
        if (args.subarea) {
            newIncident.Incident.Subarea = args.subarea;
        }

        var res = doPost('/incidents', newIncident);
        var parsedRes = JSON.parse(res);
        if (parsedRes.ReturnCode !== 0) {
            throw 'Failed to create incident. Error Response: ' + res.Messages;
        }

        hrIncident = parsedRes.Incident;

        var entryContext = {
            'HPSM.Incidents': [parsedRes.Incident],
            Ticket: [
                {
                    ID: parsedRes.Incident.IncidentID,
                    Creator: parsedRes.Incident.OpenedBy,
                    Assignee: parsedRes.Incident.Assignee,
                    State: parsedRes.Incident.Status
                }
            ]
        };
        return {
            Type: entryTypes.note,
            ContentsFormat: formats.json,
            Contents: parsedRes,

            ReadableContentsFormat: formats.markdown,
            HumanReadable: tableToMarkdown('Created Incident ' + parsedRes.Incident.IncidentID, hrIncident),

            EntryContext: entryContext
        };
    }

    // queryToObject takes query of format field1=value1&field2=value2 and return query object like: { "field1": "value1", "field2": "value2" }
    function queryToObject(query) {
        if (!query) {
            return null;
        }

        var queryObj = {};
        var queryArr = query.split('&');
        queryArr.forEach(function(keyValuePair) {
            var a = keyValuePair.split('=');
            var key = a[0];
            var value = a[1];
            queryObj[key] = value;
        });

        return queryObj;
    }

    function listIncidents() {
        var incidents = doGet('/incidents', args.query);
        incidents = JSON.parse(incidents);

        var hrIncidents = [];
        var incidentIds = [];
        if (incidents.content && incidents.content.length > 0) {
            incidents.content.forEach(function(inc) {
                hrIncidents.push(inc.Incident);
                incidentIds.push(inc.Incident.IncidentID);
            });
        }

        var entryContext = {
            'HPSM.IncidentIDs': incidentIds
        };

        return {
            Type: entryTypes.note,
            ContentsFormat: formats.json,
            Contents: incidents,

            ReadableContentsFormat: formats.markdown,
            HumanReadable: tableToMarkdown('Incidents List', hrIncidents),

            EntryContext: entryContext
        };
    }

    function getIncidentById() {
        var incident = doGet('/incidents/' + args.incidentId);
        incident = JSON.parse(incident);

        hrIncident = incident.Incident;
        var entryContext = {
            'HPSM.Incidents': [incident.Incident],
            Ticket: [
                {
                    ID: incident.Incident.IncidentID,
                    Creator: incident.Incident.OpenedBy,
                    Assignee: incident.Incident.Assignee,
                    State: incident.Incident.Status
                }
            ]
        };
        return {
            Type: entryTypes.note,
            ContentsFormat: formats.json,
            Contents: incident,

            ReadableContentsFormat: formats.markdown,
            HumanReadable: tableToMarkdown('Incident ' + args.incidentId, hrIncident),

            EntryContext: entryContext
        };
    }

    function listDevices() {
        var devices = doGet('/devices', args.query);
        devices = JSON.parse(devices);

        var hrDevices = [];
        var deviceIds = [];
        if (devices.content && devices.content.length > 0) {
            devices.content.forEach(function(dev) {
                hrDevices.push(dev.Device);
                deviceIds.push(dev.Device.ConfigurationItem);
            });
        }

        var entryContext = {
            'HPSM.DeviceIDs': deviceIds
        };

        return {
            Type: entryTypes.note,
            ContentsFormat: formats.json,
            Contents: devices,

            ReadableContentsFormat: formats.markdown,
            HumanReadable: tableToMarkdown('Devices List', hrDevices),

            EntryContext: entryContext
        };
    }
    function updateResource() {
        var resourceName = args.resourceName;
        var newResource = {};
        newResource[resourceName] = {
                Category: args.category,
                Description: [
                    args.description
                ],
                Service: args.service,
                Title: args.title,
            }

        if (args.customFields !== undefined){
            fields = JSON.parse(args.customFields);
            for (var field in fields) {
                newResource[resourceName][field] = fields[field]
            }
        }
        if (args.impact) {
            newResource[resourceName]['Impact'] = args.impact;
        }
        if (args.urgency) {
            newResource[resourceName]['Urgency'] = args.urgency;
        }
        if (args.alertStatus) {
            newResource[resourceName]['AlertStatus'] = args.alertStatus;
        }
        if (args.area) {
            newResource[resourceName]['Area'] = args.area;
        }
        if (args.assignmentGroup) {
            newResource[resourceName]['AssignmentGroup'] = args.assignmentGroup;
        }
        if (args.affectedCI) {
            newResource[resourceName]['AffectedCI'] = args.affectedCI;
        }
        if (args.company) {
            newResource[resourceName]['Company'] = args.company;
        }
        if (args.category) {
            newResource[resourceName]['Category'] = args.category;
        }
        if (args.phase) {
            newResource[resourceName]['Phase'] = args.phase;
        }
        if (args.status) {
            newResource[resourceName]['Status'] = args.status;
        }
        if (args.subarea) {
            newResource[resourceName]['Subarea'] = args.subarea;
        }
        var res = doPost('/'+resourceName+'/'+args.incidentId, newResource);
        var parsedRes = JSON.parse(res);
        if (parsedRes.ReturnCode !== 0) {
            throw 'Failed to update resource. Error Response: ' + res.Messages;
        }
        hrResource = parsedRes[resourceName];

        var entryContext = {
            'HPSM.Resources': [parsedRes[resourceName]],
            Ticket: [
                {
                    ID: parsedRes[resourceName][args.resourceKey],
                    Creator: parsedRes[resourceName]['OpenedBy'],
                    Assignee: parsedRes[resourceName]['Assignee'],
                    State: parsedRes[resourceName]['Status']
                }
            ]
        };
        return {
            Type: entryTypes.note,
            ContentsFormat: formats.json,
            Contents: parsedRes,
            ReadableContentsFormat: formats.markdown,
            HumanReadable: tableToMarkdown('Updated Resource ' + parsedRes[resourceName][args.resourceKey], hrResource),
            EntryContext: entryContext
        };
    } // queryToObject takes query of format field1=value1&field2=value2 and return query object like: { "field1": "value1", "field2": "value2" }
    function createResource() {
        var resourceName = args.resourceName;
        var newResource = {};
        newResource[resourceName] = {
                Category: args.category,
                Description: [
                    args.description
                ],
                Service: args.service,
                Title: args.title,
            }
        if (args.customFields !== undefined){
            fields = JSON.parse(args.customFields);
            for (var field in fields) {
                newResource[resourceName][field] = fields[field]
            }
        }
        if (args.impact) {
            newResource[resourceName]['Impact'] = args.impact;
        }
        if (args.urgency) {
            newResource[resourceName]['Urgency'] = args.urgency;
        }
        if (args.alertStatus) {
            newResource[resourceName]['AlertStatus'] = args.alertStatus;
        }
        if (args.area) {
            newResource[resourceName]['Area'] = args.area;
        }
        if (args.assignmentGroup) {
            newResource[resourceName]['AssignmentGroup'] = args.assignmentGroup;
        }
        if (args.affectedCI) {
            newResource[resourceName]['AffectedCI'] = args.affectedCI;
        }
        if (args.company) {
            newResource[resourceName]['Company'] = args.company;
        }
        if (args.category) {
            newResource[resourceName]['Category'] = args.category;
        }
        if (args.phase) {
            newResource[resourceName]['Phase'] = args.phase;
        }
        if (args.status) {
            newResource[resourceName]['Status'] = args.status;
        }
        if (args.subarea) {
            newResource[resourceName]['Subarea'] = args.subarea;
        }
        var res = doPost('/'+resourceName, newResource);
        var parsedRes = JSON.parse(res);
        if (parsedRes.ReturnCode !== 0) {
            throw 'Failed to create resource. Error Response: ' + res.Messages;
        }
        hrResource = parsedRes[resourceName];

        var entryContext = {
            'HPSM.Resources': [parsedRes[resourceName]],
            Ticket: [
                {
                    ID: parsedRes[resourceName][args.resourceKey],
                    Creator: parsedRes[resourceName]['OpenedBy'],
                    Assignee: parsedRes[resourceName]['Assignee'],
                    State: parsedRes[resourceName]['Status']
                }
            ]
        };
        return {
            Type: entryTypes.note,
            ContentsFormat: formats.json,
            Contents: parsedRes,
            ReadableContentsFormat: formats.markdown,
            HumanReadable: tableToMarkdown('Created Resource ' + parsedRes[resourceName][args.resourceKey], hrResource),
            EntryContext: entryContext
        };
    } // queryToObject takes query of format field1=value1&field2=value2 and return query object like: { "field1": "value1", "field2": "value2" }
    function listResources() {
        var resourceName = args.resourceName;
        var incidents = doGet('/'+resourceName, args.query);
        incidents = JSON.parse(incidents);
        var hrIncidents = [];
        var incidentIds = [];
        if (incidents.content && incidents.content.length > 0) {
            incidents.content.forEach(function(inc) {
                hrIncidents.push(inc[resourceName]);
                incidentIds.push(inc[resourceName][args.resourceKey]);
            });
        }
        var entryContext = {
            'HPSM.ResourceIDs': incidentIds
        };
        return {
            Type: entryTypes.note,
            ContentsFormat: formats.json,
            Contents: incidents,
            ReadableContentsFormat: formats.markdown,
            HumanReadable: tableToMarkdown('Resources List', hrIncidents),
            EntryContext: entryContext
        };
    }
    function getResourceById() {
        var resourceName = args.resourceName;
        var resource = doGet('/'+resourceName+'/'+ args.resourceId);
        resource = JSON.parse(resource);
        hrResource = resource[resourceName];

        var entryContext = {
            'HPSM.Resources': [resource[resourceName]],
            Ticket: [
                {
                    ID: resource[resourceName]['IncidentID'],
                    Creator: resource[resourceName]['OpenedBy'],
                    Assignee: resource[resourceName]['Assignee'],
                    State: resource[resourceName]['Status']
                }
            ]
        };
        return {
            Type: entryTypes.note,
            ContentsFormat: formats.json,
            Contents: resource,
            ReadableContentsFormat: formats.markdown,
            HumanReadable: tableToMarkdown('Resource ' + args.resourceId, hrResource),
            EntryContext: entryContext
        };
    }
    function getDeviceById() {
        var device = doGet('/devices/' + args.configurationItem);
        device = JSON.parse(device);

        hrDevice = device.Device;
        var entryContext = {
            'HPSM.Devices': [device.Device],
        };
        return {
            Type: entryTypes.note,
            ContentsFormat: formats.json,
            Contents: device,

            ReadableContentsFormat: formats.markdown,
            HumanReadable: tableToMarkdown('Device ' + args.configurationItem, hrDevice),

            EntryContext: entryContext
        };
    }

    function doPost(queryPath, body) {
        return doRequest('POST', queryPath, body);
    }

    function doPut(queryPath, body) {
        return doRequest('PUT', queryPath, body);
    }

    function doRequest(method, queryPath, body) {
        var requestUrl = url + queryPath;
        var res = http(
            requestUrl,
            {
                Method: method,
                Headers: {
                    Authorization: ['Basic ' + token],
                    Connecion: ['Closed'],
                    'Content-Type': ['application/json']
                },
                Body: JSON.stringify(body)
            },
            params.insecure,
            params.proxy
        );

        if (res.StatusCode < 200 || res.StatusCode >= 300) {
            var parsedRes;
            try {
                parsedRes = JSON.parse(res.Body);
            } catch (err) {}

            if (res.Body && parsedRes && parsedRes.ReturnCode !== 0 && parsedRes.Messages) {
                throw method + ' Request Failed to ' + requestUrl + '.\nStatus code: ' + res.StatusCode + '.\nError from Service Manager: ' + parsedRes.Messages;
            }

            throw method + ' Request Failed to ' + requestUrl + '.\nStatus code: ' + res.StatusCode + '.\nBody: ' + JSON.stringify(res.Body) + '.';
        }

        return res.Body;
    }

    function doGet(queryPath, queryParams) {
        var requestUrl = url + queryPath;
        if (queryParams && typeof queryParams === 'string') {
            // in case query is a string, then we convert it obj and then encode it to URL query
            // we also convert every \" to " and after encoding URI, the encodeURI encodes " to %22. We decode it to its original form
            requestUrl += '?' + encodeURI(queryParams.replace(/\\"/g,'"')).replace(/%22/g,"\"");
        } else if (queryParams) {
            // if the query is object then we encode it
            requestUrl += encodeToURLQuery(queryParams);
        }

        var res = http(
            requestUrl,
            {
                Method: 'GET',
                Headers: {
                    Authorization: ['Basic ' + token],
                    Connecion: ['Closed'],
                    'Content-Type': ['application/json']
                }
            },
            params.insecure,
            params.proxy
        );

        if (res.StatusCode < 200 || res.StatusCode >= 300) {
            throw 'GET Request Failed to ' + requestUrl + '.\nStatus code: ' + res.StatusCode + '.\nBody: ' + JSON.stringify(res) + '.';
        }

        return res.Body;
    }
  type: javascript
  commands:
  - name: hpsm-update-incident
    arguments:
    - name: incidentId
      required: true
      description: 'The ID of the incident. For example: "IM10013".'
    - name: title
      description: The title of the incident.
    - name: description
      description: The description of the incident
    - name: service
      description: 'The service. For example: "CI1001060", "CI1001030".'
    - name: impact
      description: The impact. Default is 4. Should be a number like 3 or 4.
    - name: urgency
      description: The urgency. Default is 4. Should be a number like 3 or 4.
    - name: alertStatus
      description: 'The alert status. For example: "SLA BREACH".'
    - name: area
      description: 'The area. For example: "performance", "failure", "hardware", "access". '
    - name: assignmentGroup
      description: 'The assignment group. For example: "Office Supplies (North America)".'
    - name: affectedCI
      description: 'The affected CI. For example: "CI1000783".'
    - name: category
      description: 'Category of the incident. For example: "incident", "complaint".'
    - name: company
      description: 'The company. For example: "advantage".'
    - name: phase
      description: 'The phase. For example: "Categorization".'
    - name: status
      description: 'The status. For example: "Categorize".'
    - name: subarea
      description: 'The sub-area. For example: system or application hangs, function
        or feature not working, error message, job failed, hardware failure, etc.'
    - name: customFields
      description: 'Custom fields in JSON format. For example: {"businessUnit":"5"}.
        Field name is case-sensitive.'
    outputs:
    - contextPath: Ticket.ID
      description: The ID of the ticket.
    - contextPath: Ticket.Creator
      description: The name of the user who created/opened the ticket.
    - contextPath: Ticket.Assignee
      description: To whom the ticket is assigned.
    - contextPath: Ticket.State
      description: The state of the ticket (open, closed, on hold).
    - contextPath: HPSM.Incidents.IncidentID
      description: The ID of the incident.
    - contextPath: HPSM.Incidents.Service
      description: 'Service/device number (For example: CI1001030).'
    - contextPath: HPSM.Incidents.Area
      description: Incident area.
    - contextPath: HPSM.Incidents.Assignee
      description: Incident assignee.
    - contextPath: HPSM.Incidents.AssignmentGroup
      description: Incident assignment group.
    - contextPath: HPSM.Incidents.Category
      description: Incident category.
    - contextPath: HPSM.Incidents.ClosedBy
      description: The user who closed the incident.
    - contextPath: HPSM.Incidents.ClosedTime
      description: Incident close time.
    - contextPath: HPSM.Incidents.ClosureCode
      description: Incident closure code.
    - contextPath: HPSM.Incidents.Company
      description: Incident company.
    - contextPath: HPSM.Incidents.Contact
      description: Incident contact details.
    - contextPath: HPSM.Incidents.Description
      description: Incident description.
    - contextPath: HPSM.Incidents.Impact
      description: Incident impact.
    - contextPath: HPSM.Incidents.JournalUpdates
      description: Incident journal updates.
    - contextPath: HPSM.Incidents.OpenTime
      description: Incident open time.
    - contextPath: HPSM.Incidents.OpenedBy
      description: The user who opened the incident.
    - contextPath: HPSM.Incidents.Phase
      description: Incident phase.
    - contextPath: HPSM.Incidents.Solution
      description: Incident solution.
    - contextPath: HPSM.Incidents.Status
      description: Incident status.
    - contextPath: HPSM.Incidents.Subarea
      description: Incident sub-area.
    - contextPath: HPSM.Incidents.Title
      description: Incident title.
    - contextPath: HPSM.Incidents.UpdatedBy
      description: The last user who updated the incident.
    - contextPath: HPSM.Incidents.UpdatedTime
      description: Incident update time.
    - contextPath: HPSM.Incidents.Urgency
      description: Incident urgency.
    description: Updates existing incident (beta).
  - name: hpsm-create-incident
    arguments:
    - name: title
      required: true
      description: The title of the incident.
    - name: description
      required: true
      description: The description of the incident.
    - name: service
      required: true
      description: 'The service. For example: "CI1001060", "CI1001030".'
    - name: impact
      description: The impact. Default is 4. Should be a number like 3 or 4.
    - name: urgency
      description: The impact. Default is 4. Should be a number like 3 or 4.
    - name: alertStatus
      description: 'The alert status. For example: "SLA BREACH".'
    - name: area
      description: 'The area. For example: "performance", "failure", "hardware", "access".'
    - name: assignmentGroup
      description: 'The assignment group. For example: "Office Supplies (North America)".'
    - name: affectedCI
      description: 'The affected CI. For example: "CI1000783".'
    - name: category
      required: true
      description: 'Category of the incident. For example: "incident", "complaint".'
    - name: company
      description: 'The company. For example: "advantage".'
    - name: phase
      description: 'The phase. For example: "Categorization".'
    - name: status
      description: 'The status. For example: "Categorize".'
    - name: subarea
      description: 'The sub-area. For example: system or application hangs, function
        or feature not working, error message, job failed, hardware failure, etc.'
    - name: customFields
      description: 'Custom fields in JSON format. For example: {"businessUnit":"5"}.
        Field name is case-sensitive.'
    outputs:
    - contextPath: Ticket.ID
      description: The ID of the ticket.
    - contextPath: Ticket.Creator
      description: The user who created/opened the ticket.
    - contextPath: Ticket.Assignee
      description: To whom the ticket is assigned.
    - contextPath: Ticket.State
      description: The state of the ticket (open, closed, on hold).
    - contextPath: HPSM.Incidents.IncidentID
      description: The ID of the incident.
    - contextPath: HPSM.Incidents.Service
      description: Service/device number.
    - contextPath: HPSM.Incidents.Area
      description: Incident area.
    - contextPath: HPSM.Incidents.Assignee
      description: Incident assignee.
    - contextPath: HPSM.Incidents.AssignmentGroup
      description: Incident assignment group.
    - contextPath: HPSM.Incidents.Category
      description: Incident category.
    - contextPath: HPSM.Incidents.ClosedBy
      description: The user who closed the incident.
    - contextPath: HPSM.Incidents.ClosedTime
      description: Incident close time.
    - contextPath: HPSM.Incidents.ClosureCode
      description: Incident closure code.
    - contextPath: HPSM.Incidents.Company
      description: Incident company.
    - contextPath: HPSM.Incidents.Contact
      description: Incident contact details.
    - contextPath: HPSM.Incidents.Description
      description: Incident description.
    - contextPath: HPSM.Incidents.Impact
      description: Incident impact.
    - contextPath: HPSM.Incidents.JournalUpdates
      description: Incident journal updates.
    - contextPath: HPSM.Incidents.OpenTime
      description: Incident open time.
    - contextPath: HPSM.Incidents.OpenedBy
      description: The user who opened the incident.
    - contextPath: HPSM.Incidents.Phase
      description: Incident phase.
    - contextPath: HPSM.Incidents.Solution
      description: Incident solution.
    - contextPath: HPSM.Incidents.Status
      description: Incident status.
    - contextPath: HPSM.Incidents.Subarea
      description: Incident sub-area.
    - contextPath: HPSM.Incidents.Title
      description: Incident title.
    - contextPath: HPSM.Incidents.UpdatedBy
      description: The last user who updated the incident.
    - contextPath: HPSM.Incidents.UpdatedTime
      description: Incident update time.
    - contextPath: HPSM.Incidents.Urgency
      description: Incident urgency.
    description: Creates a new incident.
  - name: hpsm-list-incidents
    arguments:
    - name: query
      description: 'The query by which to limit the returned list of incidents. For
        example: field1=value1&field2=value2. For more information, see https://docs.microfocus.com/SM/9.41/Codeless/Content/Resources/PDF_PD/HP_Service_Manager_Web_Services_codeless.pdf.'
    outputs:
    - contextPath: HPSM.IncidentIDs
      description: An array of incident IDs.
    description: Returns all incidents.
  - name: hpsm-get-incident-by-id
    arguments:
    - name: incidentId
      required: true
      default: true
      description: 'The ID of an incident. For exampleJ: "IM10013".'
    outputs:
    - contextPath: Ticket.ID
      description: The ID of the ticket.
    - contextPath: Ticket.Creator
      description: The user who created/opened the ticket.
    - contextPath: Ticket.Assignee
      description: To whom the ticket is assigned.
    - contextPath: Ticket.State
      description: The state of the ticket (open, closed, on hold).
    - contextPath: HPSM.Incidents.IncidentID
      description: The ID of the incident.
    - contextPath: HPSM.Incidents.Service
      description: Service/device number.
    - contextPath: HPSM.Incidents.Area
      description: Incident area.
    - contextPath: HPSM.Incidents.Assignee
      description: Incident assignee.
    - contextPath: HPSM.Incidents.AssignmentGroup
      description: Incident assignment group.
    - contextPath: HPSM.Incidents.Category
      description: Incident category.
    - contextPath: HPSM.Incidents.ClosedBy
      description: The user who closed the incident.
    - contextPath: HPSM.Incidents.ClosedTime
      description: Incident close time.
    - contextPath: HPSM.Incidents.ClosureCode
      description: Incident closure code.
    - contextPath: HPSM.Incidents.Company
      description: Incident company.
    - contextPath: HPSM.Incidents.Contact
      description: Incident contact details.
    - contextPath: HPSM.Incidents.Description
      description: Incident description.
    - contextPath: HPSM.Incidents.Impact
      description: Incident impact.
    - contextPath: HPSM.Incidents.JournalUpdates
      description: Incident journal updates.
    - contextPath: HPSM.Incidents.OpenTime
      description: Incident open time.
    - contextPath: HPSM.Incidents.OpenedBy
      description: The user who opened the incident.
    - contextPath: HPSM.Incidents.Phase
      description: Incident phase.
    - contextPath: HPSM.Incidents.Solution
      description: Incident solution.
    - contextPath: HPSM.Incidents.Status
      description: Incident status.
    - contextPath: HPSM.Incidents.Subarea
      description: Incident sub-area.
    - contextPath: HPSM.Incidents.Title
      description: Incident title.
    - contextPath: HPSM.Incidents.UpdatedBy
      description: The last user who updated the incident.
    - contextPath: HPSM.Incidents.UpdatedTime
      description: Incident update time.
    - contextPath: HPSM.Incidents.Urgency
      description: Incident urgency.
    description: Returns a single incident by ID. If no incident exists with the specified
      ID, an error will be returned.
  - name: hpsm-create-resource
    arguments:
    - name: title
      required: true
      description: The title of the resource.
    - name: description
      required: true
      description: The description of the resource.
    - name: service
      required: true
      description: 'The service. For example: "CI1001060", "CI1001030".'
    - name: impact
      description: The impact. Default is 4. Should be a number like 3 or 4.
    - name: urgency
      description: The urgency. Default is 4. Should be a number like 3 or 4.
    - name: alertStatus
      description: 'The alert status. For example: "SLA BREACH".'
    - name: area
      description: 'The area. For example: performance, failure, hardware, access".'
    - name: assignmentGroup
      description: 'The assignment group. For example: "Office Supplies (North America)".'
    - name: affectedCI
      description: 'The affected CI. For example: "CI1000783".'
    - name: category
      required: true
      description: 'Category of resource. For example: "resource", "complaint".'
    - name: company
      description: 'The company. For example: "advantage".'
    - name: phase
      description: 'The phase. For example: "Categorization".'
    - name: status
      description: 'The status. For example: "Categorize".'
    - name: subarea
      description: 'The sub-area. For example: system or application hangs, function
        or feature not working, error message, job failed, hardware failure, etc.'
    - name: customFields
      description: 'Custom fields in JSON format. For example: {"businessUnit":"5"}.
        Field name is case-sensitive.'
    - name: resourceName
      required: true
      description: 'The resource name (API URI) that will be used. For example: "incidents".'
    - name: resourceKey
      required: true
      description: 'The resource key that will be used. For example: "InteractionID".'
    outputs:
    - contextPath: Ticket.ID
      description: The ID of the ticket.
    - contextPath: Ticket.Creator
      description: The user who created/opened the ticket.
    - contextPath: Ticket.Assignee
      description: To whom the ticket is assigned.
    - contextPath: Ticket.State
      description: The state of the ticket (open, closed, on hold).
    - contextPath: HPSM.Resources.ResourceID
      description: The ID of the resource.
    - contextPath: HPSM.Resources.Service
      description: Service/device number.
    - contextPath: HPSM.Resources.Area
      description: Resource area.
    - contextPath: HPSM.Resources.Assignee
      description: Resource assignee.
    - contextPath: HPSM.Resources.AssignmentGroup
      description: Resource assignment group.
    - contextPath: HPSM.Resources.Category
      description: Resource category.
    - contextPath: HPSM.Resources.ClosedBy
      description: The user who closed the resource.
    - contextPath: HPSM.Resources.ClosedTime
      description: Resource close time.
    - contextPath: HPSM.Resources.ClosureCode
      description: Resource closure code.
    - contextPath: HPSM.Resources.Company
      description: Resource company.
    - contextPath: HPSM.Resources.Contact
      description: Resource contact details.
    - contextPath: HPSM.Resources.Description
      description: Resource description.
    - contextPath: HPSM.Resources.Impact
      description: Resource impact.
    - contextPath: HPSM.Resources.JournalUpdates
      description: Resource journal updates.
    - contextPath: HPSM.Resources.OpenTime
      description: Resource open time.
    - contextPath: HPSM.Resources.OpenedBy
      description: The user who opened the resource.
    - contextPath: HPSM.Resources.Phase
      description: Resource phase.
    - contextPath: HPSM.Resources.Solution
      description: Resource solution.
    - contextPath: HPSM.Resources.Status
      description: Resource status.
    - contextPath: HPSM.Resources.Subarea
      description: Resource sub-area.
    - contextPath: HPSM.Resources.Title
      description: Resource title.
    - contextPath: HPSM.Resources.UpdatedBy
      description: The last user who updated the resource.
    - contextPath: HPSM.Resources.UpdatedTime
      description: Resource update time.
    - contextPath: HPSM.Resources.Urgency
      description: Resource urgency.
    description: Updates the existing resource (beta).
  - name: hpsm-update-resource
    arguments:
    - name: title
      required: true
      description: The title of the resource.
    - name: description
      required: true
      description: The description of the resource.
    - name: service
      required: true
      description: 'The service. For example: "CI1001060", "CI1001030".'
    - name: impact
      description: The impact. Default is 4. Should be a number like 3 or 4.
    - name: urgency
      description: The urgency. Default is 4. Should be a number like 3 or 4.
    - name: alertStatus
      description: 'The alert status. For example: "SLA BREACH".'
    - name: area
      description: 'The area. For example: "performance", "failure", "hardware", "access".'
    - name: assignmentGroup
      description: 'The assignment group. For example: "Office Supplies (North America)".'
    - name: affectedCI
      description: 'The affected CI. For example: "CI1000783".'
    - name: category
      required: true
      description: 'Category of resource. For example: "resource", "complaint".'
    - name: company
      description: 'The company. For example: "advantage".'
    - name: phase
      description: 'The phase. For example: "Categorization".'
    - name: status
      description: 'The status. For example: "Categorize".'
    - name: subarea
      description: 'The sub-area. For example: system or application hangs, function
        or feature not working, error message, job failed, hardware failure, etc.'
    - name: customFields
      description: 'Custom fields in JSON format. For example: {"businessUnit":"5"}.
        Field name is case-sensitive.'
    - name: resourceName
      required: true
      description: 'The resource name (API URI) that will be used. For example: "incidents".'
    - name: resourceKey
      required: true
      description: 'The resource key that will be used. For example: "InteractionID".'
    outputs:
    - contextPath: Ticket.ID
      description: The ID of the ticket.
    - contextPath: Ticket.Creator
      description: The user who created/opened the ticket.
    - contextPath: Ticket.Assignee
      description: To whom the ticket is assigned.
    - contextPath: Ticket.State
      description: The state of the ticket (open, closed, on hold).
    - contextPath: HPSM.Resources.ResourceID
      description: The ID of the resource.
    - contextPath: HPSM.Resources.Service
      description: Service/device number.
    - contextPath: HPSM.Resources.Area
      description: Resource area.
    - contextPath: HPSM.Resources.Assignee
      description: Resource assignee.
    - contextPath: HPSM.Resources.AssignmentGroup
      description: Resource assignment group.
    - contextPath: HPSM.Resources.Category
      description: Resource category.
    - contextPath: HPSM.Resources.ClosedBy
      description: The user who closed the resource.
    - contextPath: HPSM.Resources.ClosedTime
      description: Resource close time.
    - contextPath: HPSM.Resources.ClosureCode
      description: Resource closure code.
    - contextPath: HPSM.Resources.Company
      description: Resource company.
    - contextPath: HPSM.Resources.Contact
      description: Resource contact details.
    - contextPath: HPSM.Resources.Description
      description: Resource description.
    - contextPath: HPSM.Resources.Impact
      description: Resource impact.
    - contextPath: HPSM.Resources.JournalUpdates
      description: Resource journal updates.
    - contextPath: HPSM.Resources.OpenTime
      description: Resource open time.
    - contextPath: HPSM.Resources.OpenedBy
      description: The user who opened the resource.
    - contextPath: HPSM.Resources.Phase
      description: Resource phase.
    - contextPath: HPSM.Resources.Solution
      description: Resource solution.
    - contextPath: HPSM.Resources.Status
      description: Resource status.
    - contextPath: HPSM.Resources.Subarea
      description: Resource sub-area.
    - contextPath: HPSM.Resources.Title
      description: Resource title.
    - contextPath: HPSM.Resources.UpdatedBy
      description: The last user who updated the resource.
    - contextPath: HPSM.Resources.UpdatedTime
      description: Resource update time.
    - contextPath: HPSM.Resources.Urgency
      description: Resource urgency.
    description: Creates a new resource.
  - name: hpsm-list-resources
    arguments:
    - name: query
      description: 'The query by which to limit the returned list of incidents. For
        example: field1=value1&field2=value2. For more information, see https://docs.microfocus.com/SM/9.41/Codeless/Content/Resources/PDF_PD/HP_Service_Manager_Web_Services_codeless.pdf.'
    - name: resourceName
      required: true
      description: 'The resource name (API URI) that will be used. For example: "incidents".'
    outputs:
    - contextPath: HPSM.ResourceIDs
      description: An array of resource IDs.
    description: Returns all resources (beta).
  - name: hpsm-get-resource-by-id
    arguments:
    - name: resourceId
      required: true
      default: true
      description: 'The ID of the resource. For example: "IM10013".'
    - name: resourceName
      required: true
      description: 'The resource name (API URI) that will be used. For example: "incidents".'
    outputs:
    - contextPath: Ticket.ID
      description: The ID of the ticket.
    - contextPath: Ticket.Creator
      description: The user who created/opened the ticket.
    - contextPath: Ticket.Assignee
      description: To whom the ticket is assigned.
    - contextPath: Ticket.State
      description: The state of the ticket (open, closed, on hold).
    - contextPath: HPSM.Resources.ResourceID
      description: The ID of the resource.
    - contextPath: HPSM.Resources.Service
      description: Service/device number.
    - contextPath: HPSM.Resources.Area
      description: Resource area.
    - contextPath: HPSM.Resources.Assignee
      description: Resource assignee.
    - contextPath: HPSM.Resources.AssignmentGroup
      description: Resource assignment group.
    - contextPath: HPSM.Resources.Category
      description: Resource category.
    - contextPath: HPSM.Resources.ClosedBy
      description: The user who closed the resource.
    - contextPath: HPSM.Resources.ClosedTime
      description: Resource close time.
    - contextPath: HPSM.Resources.ClosureCode
      description: Resource closure code.
    - contextPath: HPSM.Resources.Company
      description: Resource company.
    - contextPath: HPSM.Resources.Contact
      description: Resource contact details.
    - contextPath: HPSM.Resources.Description
      description: Resource description.
    - contextPath: HPSM.Resources.Impact
      description: Resource impact.
    - contextPath: HPSM.Resources.JournalUpdates
      description: Resource journal updates.
    - contextPath: HPSM.Resources.OpenTime
      description: Resource open time.
    - contextPath: HPSM.Resources.OpenedBy
      description: The user who opened the resource.
    - contextPath: HPSM.Resources.Phase
      description: Resource phase.
    - contextPath: HPSM.Resources.Solution
      description: Resource solution.
    - contextPath: HPSM.Resources.Status
      description: Resource status.
    - contextPath: HPSM.Resources.Subarea
      description: Resource sub-area.
    - contextPath: HPSM.Resources.Title
      description: Resource title.
    - contextPath: HPSM.Resources.UpdatedBy
      description: The last user who updated the resource.
    - contextPath: HPSM.Resources.UpdatedTime
      description: Resource update time.
    - contextPath: HPSM.Resources.Urgency
      description: Resource urgency.
    description: Returns a single resource by ID. If no resource exists with the specified
      ID, an error will be returned (beta).
  - name: hpsm-list-devices
    arguments:
    - name: query
      description: 'The query by which to limit the returned list of incidents. For
        example: field1=value1&field2=value2. For more information, see https://docs.microfocus.com/SM/9.41/Codeless/Content/Resources/PDF_PD/HP_Service_Manager_Web_Services_codeless.pdf.'
    outputs:
    - contextPath: HPSM.DeviceIDs
      description: The IDs (configuration items) of the devices.
    description: Returns a list of devices, filtered according to query.
  - name: hpsm-get-device
    arguments:
    - name: configurationItem
      required: true
      description: 'ID of the configuration item of the device. For example: "CI1000011".'
    outputs:
    - contextPath: HPSM.Devices.AssignmentGroup
      description: Device assignment group.
    - contextPath: HPSM.Devices.Company
      description: Device company.
    - contextPath: HPSM.Devices.ConfigurationItem
      description: Device configuration item.
    - contextPath: HPSM.Devices.ConfigurationItemSubType
      description: Device configurationItem sub-type.
    - contextPath: HPSM.Devices.ConfigurationItemType
      description: Device configuration item type.
    - contextPath: HPSM.Devices.Department
      description: Device department.
    - contextPath: HPSM.Devices.DisplayName
      description: Device display name.
    - contextPath: HPSM.Devices.Location
      description: Device location.
    - contextPath: HPSM.Devices.LocationCode
      description: Device location code.
    - contextPath: HPSM.Devices.Model
      description: Device model.
    - contextPath: HPSM.Devices.PartNumber
      description: Device part number.
    - contextPath: HPSM.Devices.Status
      description: Device status.
    - contextPath: HPSM.Devices.UpdatedBy
      description: The last user who updated the device.
    description: Find and return a device by ID.
  - name: hpsm-create-request
    arguments:
    - description: The title of the request.
      name: title
      required: true
    - description: The description of the request.
      name: description
      required: true
    - description: Who created/opened the service request
      name: callbackcontactname
    - description: Who created/opened the service request
      name: contactname
      required: true
    outputs:
    - contextPath: HPSM.ServiceRequest.ContactName
      description: Incident contact details
    - contextPath: HPSM.ServiceRequest.ID
      description: The id of the service request
    - contextPath: HPSM.ServiceRequest.CallbackContactName
      description: Who created/opened the service request
    - contextPath: HPSM.ServiceRequest.Title
      description: Incident title
    description: Creates a new service request
  runonce: false
fromversion: 5.0.0
