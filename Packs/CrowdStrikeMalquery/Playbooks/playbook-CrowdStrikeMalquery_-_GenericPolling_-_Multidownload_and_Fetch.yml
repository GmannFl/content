contentitemexportablefields:
  contentitemfields:
    propagationLabels:
    - all
description: |-
  Schedule samples for download. Using samples-multidownload is a
      three-step process: 1. Schedule the download with samples-multidownload, which
      returns a request ID. 2. Provide that request ID to the cs-malquery-get-request,
      in order to check the status of the operation. 3. When the request status is
      “done”, use cs-malquery-sample-fetch to download the results as a password-protected
      archive
      Use this playbook as a sub-playbook to schedule samples for download.
      This playbook implements polling by continuously running the `get-request` command until the operation completes.
      Once the request status is done the sub-playbook runs cs-malquery-sample-fetch.

      The remote action should have the following structure:
      1. Initiate the operation - insert the sample SHA256 ids.
      2. Poll to check if the operation completed.
      3. Get the results of the operation.
id: CrowdStrikeMalquery - Multidownload and Fetch
inputs:
- description: Samples sha256 ids. Comma-separated values.
  key: sha256
  playbookInputQuery:
  required: true
  value: {}
name: CrowdStrikeMalquery - Multidownload and Fetch
outputs:
- contextPath: File.SHA256
  description: SHA256 hash.
- contextPath: File.SHA1
  description: SHA1 hash.
- contextPath: File.SHA512
  description: SHA512 hash.
- contextPath: File.Name
  description: Name of the file.
- contextPath: File.EntryID
  description: Entry ID.
- contextPath: File.Info
  description: File info.
- contextPath: File.Type
  description: Type of the file.
- contextPath: File.MD5
  description: MD5 hash.
starttaskid: '0'
tasks:
  '0':
    id: '0'
    ignoreworker: false
    nexttasks:
      '#none#':
      - '1'
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ''
      id: 10ff0344-4140-4677-8f42-cb2e4538ee95
      iscommand: false
      name: ''
      version: -1
      description: ''
    taskid: 10ff0344-4140-4677-8f42-cb2e4538ee95
    timertriggers: []
    type: start
    view: |-
      {
        "position": {
          "x": 710,
          "y": 50
        }
      }
  '1':
    id: '1'
    ignoreworker: false
    nexttasks:
      '#none#':
      - '2'
    note: false
    quietmode: 0
    scriptarguments:
      samples:
        simple: ${inputs.sha256}
    separatecontext: false
    skipunavailable: false
    task:
      brand: ''
      description: 'Schedule samples for download. Using samples-multidownload is
        a three-step process: 1. Schedule the download with samples-multidownload,
        which returns a request ID. 2. Provide that request ID to the cs-malquery-get-request,
        in order to check the status of the operation. 3. When the request status
        is “done”, use cs-malquery-sample-fetch to download the results as a password-protected
        archive. The password to extract results from the archive is: "infected"'
      id: 85d37606-c162-4f13-8463-97fd1a1484ec
      iscommand: true
      name: Samples multidownload1
      script: '|||cs-malquery-samples-multidownload'
      type: regular
      version: -1
    taskid: 85d37606-c162-4f13-8463-97fd1a1484ec
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 720,
          "y": 220
        }
      }
  '2':
    id: '2'
    ignoreworker: false
    loop:
      exitCondition: ''
      iscommand: false
      max: 100
      wait: 1
    nexttasks:
      '#none#':
      - '3'
    note: false
    quietmode: 0
    scriptarguments:
      Ids:
        simple: ${Malquery.Request_ID}
      Interval:
        simple: '1'
      PollingCommandArgName:
        simple: request_id
      PollingCommandName:
        simple: cs-malquery-get-request
      Timeout:
        simple: '10'
      dt:
        simple: Malquery(val.Status == "inprogress" ).Request_ID
    separatecontext: true
    skipunavailable: false
    task:
      brand: ''
      id: daaf53c7-1a5b-4993-8ef8-7e6c14a94665
      iscommand: false
      name: GenericPolling
      playbookId: GenericPolling
      type: playbook
      version: -1
      description: ''
    taskid: daaf53c7-1a5b-4993-8ef8-7e6c14a94665
    timertriggers: []
    type: playbook
    view: |-
      {
        "position": {
          "x": 720,
          "y": 400
        }
      }
  '3':
    id: '3'
    ignoreworker: false
    nexttasks:
      '#none#':
      - '4'
    note: false
    quietmode: 0
    scriptarguments:
      request_id:
        simple: ${Malquery.Request_ID}
    separatecontext: false
    skipunavailable: false
    task:
      brand: ''
      description: Fetch a zip archive containing the samples. Call this once the
        cs-malquery-samples-multidownload request has finished processing. The password
        for the archive is 'infected'.
      id: c0c04f0c-df4e-444c-82e7-fae4afedfec5
      iscommand: true
      name: Fetch samples
      script: '|||cs-malquery-sample-fetch'
      type: regular
      version: -1
    taskid: c0c04f0c-df4e-444c-82e7-fae4afedfec5
    timertriggers: []
    type: regular
    view: |-
      {
        "position": {
          "x": 720,
          "y": 560
        }
      }
  '4':
    id: '4'
    ignoreworker: false
    note: false
    quietmode: 0
    separatecontext: false
    skipunavailable: false
    task:
      brand: ''
      id: 25dd7b9e-f974-4ec8-8bdd-972114c6260f
      iscommand: false
      name: Done
      type: title
      version: -1
      description: ''
    taskid: 25dd7b9e-f974-4ec8-8bdd-972114c6260f
    timertriggers: []
    type: title
    view: |-
      {
        "position": {
          "x": 720,
          "y": 730
        }
      }
version: -1
view: |-
  {
    "linkLabelsPosition": {},
    "paper": {
      "dimensions": {
        "height": 745,
        "width": 390,
        "x": 710,
        "y": 50
      }
    }
  }
tests:
- CrowdStrikeMalquery-Test
fromversion: 5.5.0
